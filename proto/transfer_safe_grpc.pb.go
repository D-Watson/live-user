// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: transfer_safe.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransferSafe_SecureTransferPublicKey_FullMethodName  = "/transfer_safe.TransferSafe/SecureTransferPublicKey"
	TransferSafe_SecureTransferPrivateKey_FullMethodName = "/transfer_safe.TransferSafe/SecureTransferPrivateKey"
	TransferSafe_SecureEncrypt_FullMethodName            = "/transfer_safe.TransferSafe/SecureEncrypt"
	TransferSafe_SecureDecrypt_FullMethodName            = "/transfer_safe.TransferSafe/SecureDecrypt"
)

// TransferSafeClient is the client API for TransferSafe service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 安全传输服务
type TransferSafeClient interface {
	// 执行安全传输
	SecureTransferPublicKey(ctx context.Context, in *GetPublicTokenRequest, opts ...grpc.CallOption) (*GetPublicTokenReply, error)
	SecureTransferPrivateKey(ctx context.Context, in *GetPrivateTokenRequest, opts ...grpc.CallOption) (*GetPrivateTokenReply, error)
	SecureEncrypt(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
	SecureDecrypt(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
}

type transferSafeClient struct {
	cc grpc.ClientConnInterface
}

func NewTransferSafeClient(cc grpc.ClientConnInterface) TransferSafeClient {
	return &transferSafeClient{cc}
}

func (c *transferSafeClient) SecureTransferPublicKey(ctx context.Context, in *GetPublicTokenRequest, opts ...grpc.CallOption) (*GetPublicTokenReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPublicTokenReply)
	err := c.cc.Invoke(ctx, TransferSafe_SecureTransferPublicKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferSafeClient) SecureTransferPrivateKey(ctx context.Context, in *GetPrivateTokenRequest, opts ...grpc.CallOption) (*GetPrivateTokenReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPrivateTokenReply)
	err := c.cc.Invoke(ctx, TransferSafe_SecureTransferPrivateKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferSafeClient) SecureEncrypt(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Data)
	err := c.cc.Invoke(ctx, TransferSafe_SecureEncrypt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferSafeClient) SecureDecrypt(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Data)
	err := c.cc.Invoke(ctx, TransferSafe_SecureDecrypt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransferSafeServer is the server API for TransferSafe service.
// All implementations must embed UnimplementedTransferSafeServer
// for forward compatibility.
//
// 安全传输服务
type TransferSafeServer interface {
	// 执行安全传输
	SecureTransferPublicKey(context.Context, *GetPublicTokenRequest) (*GetPublicTokenReply, error)
	SecureTransferPrivateKey(context.Context, *GetPrivateTokenRequest) (*GetPrivateTokenReply, error)
	SecureEncrypt(context.Context, *Data) (*Data, error)
	SecureDecrypt(context.Context, *Data) (*Data, error)
	mustEmbedUnimplementedTransferSafeServer()
}

// UnimplementedTransferSafeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransferSafeServer struct{}

func (UnimplementedTransferSafeServer) SecureTransferPublicKey(context.Context, *GetPublicTokenRequest) (*GetPublicTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecureTransferPublicKey not implemented")
}
func (UnimplementedTransferSafeServer) SecureTransferPrivateKey(context.Context, *GetPrivateTokenRequest) (*GetPrivateTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecureTransferPrivateKey not implemented")
}
func (UnimplementedTransferSafeServer) SecureEncrypt(context.Context, *Data) (*Data, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecureEncrypt not implemented")
}
func (UnimplementedTransferSafeServer) SecureDecrypt(context.Context, *Data) (*Data, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecureDecrypt not implemented")
}
func (UnimplementedTransferSafeServer) mustEmbedUnimplementedTransferSafeServer() {}
func (UnimplementedTransferSafeServer) testEmbeddedByValue()                      {}

// UnsafeTransferSafeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransferSafeServer will
// result in compilation errors.
type UnsafeTransferSafeServer interface {
	mustEmbedUnimplementedTransferSafeServer()
}

func RegisterTransferSafeServer(s grpc.ServiceRegistrar, srv TransferSafeServer) {
	// If the following call pancis, it indicates UnimplementedTransferSafeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransferSafe_ServiceDesc, srv)
}

func _TransferSafe_SecureTransferPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferSafeServer).SecureTransferPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferSafe_SecureTransferPublicKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferSafeServer).SecureTransferPublicKey(ctx, req.(*GetPublicTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferSafe_SecureTransferPrivateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrivateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferSafeServer).SecureTransferPrivateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferSafe_SecureTransferPrivateKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferSafeServer).SecureTransferPrivateKey(ctx, req.(*GetPrivateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferSafe_SecureEncrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferSafeServer).SecureEncrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferSafe_SecureEncrypt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferSafeServer).SecureEncrypt(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferSafe_SecureDecrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferSafeServer).SecureDecrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferSafe_SecureDecrypt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferSafeServer).SecureDecrypt(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

// TransferSafe_ServiceDesc is the grpc.ServiceDesc for TransferSafe service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransferSafe_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transfer_safe.TransferSafe",
	HandlerType: (*TransferSafeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SecureTransferPublicKey",
			Handler:    _TransferSafe_SecureTransferPublicKey_Handler,
		},
		{
			MethodName: "SecureTransferPrivateKey",
			Handler:    _TransferSafe_SecureTransferPrivateKey_Handler,
		},
		{
			MethodName: "SecureEncrypt",
			Handler:    _TransferSafe_SecureEncrypt_Handler,
		},
		{
			MethodName: "SecureDecrypt",
			Handler:    _TransferSafe_SecureDecrypt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transfer_safe.proto",
}
